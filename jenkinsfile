pipeline {
    agent any

    environment {
        BACKEND_IMAGE = "my-backend-image"
        FRONTEND_IMAGE = "my-frontend-image"
        NGINX_IMAGE = "my-nginx-image"
        WEBSOCKET_IMAGE = "my-websocket-image"
        DOCKER_CREDENTIALS_ID = 'docker-credentials'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    if (fileExists('.git')) {
                        sh 'git reset --hard'
                        sh 'git clean -fd'
                        sh 'git pull origin main'
                    } else {
                        git branch: 'main', url: 'https://github.com/dario208/elecdis.git', credentialsId: 'github-credentials-id'
                    }
                }

            }
        }

        stage('Build Backend') {
            steps {
                script {
                    // Build the backend Docker image
                    dir('backend') {
                        sh 'sudo docker build -t $BACKEND_IMAGE .'
                    }
                }
            }
        }

        // stage('Test Backend') {
        //     steps {
        //         script {
        //             // Run backend unit tests
        //             dir('backend') {
        //                 sh 'sudo docker run $BACKEND_IMAGE pytest tests/'
        //             }
        //         }
        //     }
        // }

        stage('Build Frontend') {
            steps {
                script {
                    // Build the frontend Docker image
                    dir('frontend') {
                        sh 'sudo docker build -t $FRONTEND_IMAGE .'
                    }
                }
            }
        }

        stage('Build WebSocket') {
            steps {
                script {
                    // Build the WebSocket service Docker image
                    dir('websocket') {
                        sh 'sudo docker build -t $WEBSOCKET_IMAGE .'
                    }
                }
            }
        }

        stage('Build Nginx') {
            steps {
                script {
                    // Build the Nginx image that serves frontend and proxies backend
                    dir('nginx') {
                        sh 'sudo docker build -t $NGINX_IMAGE .'
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                     // Mettre à jour et démarrer les services Docker en local
                    sh 'sudo docker-compose pull'     // Télécharge les images les plus récentes
                    sh 'sudo docker-compose up -d'   // Démarre les conteneurs en arrière-plan
                    // Push images to Docker registry (optional)
                    // withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                    //     sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                    //     sh 'docker push $BACKEND_IMAGE'
                    //     sh 'docker push $FRONTEND_IMAGE'
                    //     sh 'docker push $WEBSOCKET_IMAGE'
                    //     sh 'docker push $NGINX_IMAGE'
                    // }

                    // // Deploy the backend, frontend, WebSocket, and Nginx on your server using Docker Compose
                    // sh 'scp docker-compose.yml user@your-server:/path/to/deployment/'
                    // sh 'ssh user@your-server "cd /path/to/deployment && docker-compose pull && docker-compose up -d"'
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
